/*
 Coupled lamda/4 resonator.
 
 Coupling point is in the center of coupling area, being offset to the edge of protect layer towards the feedline.
 Schematic:
 
 ===================== <- feedline
  ________x________    <- resonator coupling area 
 |                         |   x - coupling (base) point
*/



#include "wiring.layout"
#include "idc.layout"

    int meanderSegmentLength = 200e3;//860 for hnyk2, 330 for hnyk, assym 520
    int step = 200e3;


// Using the fit for ɛ=11.45 and claw length of ~70 um
double clawPhaseShift(double frequency) {
    return 0.014+1.436*frequency;
}
    
int length_from_frequency(double frequency, bool claw) {
    if (claw)
        return (math::sqrt2/2*c/frequency/(math::sqrt(ɛ+1))/1e9/2)*1e6 - 1./180.*clawPhaseShift(frequency)/frequency/1e9*c/2/math::sqrt(ɛ/2.+1./2.)/2.*1e6;
    else
        return (math::sqrt2/2*c/frequency/(math::sqrt(ɛ+1))/1e9/2)*1e6;
}


point drawMeanderStep(cell* curCell, int layer, point cursor, int meanderSegmentLength, int resTurnRad, int width) {
        
        point cursor2 = wire(curCell, layer, cursor, "r", meanderSegmentLength, width); //r
        cursor2 = torusTurn(curCell, layer, cursor2, "rd", resTurnRad, width);//rd
        cursor2 = torusTurn(curCell, layer, cursor2, "dl", resTurnRad, width);//dl
        cursor2 = wire(curCell, layer, cursor2, "l", meanderSegmentLength, width);//l
        cursor2 = torusTurn(curCell, layer, cursor2, "ld", resTurnRad, width);//ld
        return torusTurn(curCell, layer, cursor2, "dr", resTurnRad, width);//dr

}

point drawMeanderAssymStep(cell* curCell, int layer, point cursor, int meanderSegmentLength1, int resTurnRad, int width) {
        
        point cursor2 = wire(curCell, layer, cursor, "r", meanderSegmentLength1, width); //r
        cursor2 = torusTurn(curCell, layer, cursor2, "rd", resTurnRad, width);//rd
        cursor2 = torusTurn(curCell, layer, cursor2, "dl", resTurnRad, width);//dl
        cursor2 = wire(curCell, layer, cursor2, "l", meanderSegmentLength1, width);//l
        cursor2 = torusTurn(curCell, layer, cursor2, "ld", resTurnRad, width);//ld
        return torusTurn(curCell, layer, cursor2, "dr", resTurnRad, width);//dr
        
}
void generateStructure(cell* curCell, point cursor,  int width, int tailLen, int length,  int resTurnRad, int layer) {
    
    int curLength = 0;
    point start;
    start.set(cursor.x(), cursor.y());

    
    cursor = wire(curCell, layer, cursor, "r", step, width);
    curLength+=step;
    cursor = torusTurn(curCell, layer, cursor, "rd", resTurnRad, width);
    curLength+=resTurnRad*math::pi_2;
    cursor = wire(curCell, layer, cursor, "d", tailLen, width);
    curLength+=tailLen;
    
    cursor.set(start.x(), start.y());
    
    cursor = wire(curCell, layer, cursor, "l", step, width);
    curLength+=step;
    cursor = torusTurn(curCell, layer, cursor, "ld", resTurnRad, width);
    curLength+=resTurnRad*math::pi_2;
    cursor = wire(curCell, layer, cursor, "d", 50e3, width);
    curLength+=50e3;
    cursor = torusTurn(curCell, layer, cursor, "dr", resTurnRad, width);
    curLength+=resTurnRad*math::pi_2;
    
    int meanderStepLength = 2*meanderSegmentLength+2*math::pi*resTurnRad;

    point cursor2;
    while ((length -curLength)>meanderStepLength) {
        cursor = drawMeanderStep(curCell, layer, cursor, meanderSegmentLength, resTurnRad, width);
        curLength+=meanderStepLength;
    }
    
    if (length - curLength >= meanderSegmentLength+2*resTurnRad*math::pi_2) {
        cursor = wire(curCell, layer, cursor, "r", meanderSegmentLength, width);
        cursor = torusTurn(curCell, layer, cursor, "rd", resTurnRad, width);
        cursor = torusTurn(curCell, layer, cursor, "dl", resTurnRad, width);
        curLength+= meanderSegmentLength+2*resTurnRad*math::pi_2;
        if (length - curLength >= meanderSegmentLength) {
            cursor = wire(curCell, layer, cursor, "l", meanderSegmentLength, width);
            curLength += meanderSegmentLength;
            cursor = torusArbAngleTurn(curCell, layer, cursor, "ld", resTurnRad, width, (length-curLength)/2/math::pi/resTurnRad*360);
        } else {
            cursor = wire(curCell, layer, cursor, "l", length - curLength, width);
        }
    } else if (length - curLength >= meanderSegmentLength) {
        cursor = wire(curCell, layer, cursor, "r", meanderSegmentLength, width);
        curLength+=meanderSegmentLength;
        cursor = torusArbAngleTurn(curCell, layer, cursor, "rd", resTurnRad, width, (length-curLength)/2/math::pi/resTurnRad*360);
    } else {
        cursor = wire(curCell, layer, cursor, "r", length - curLength, width);
        curLength+=length - curLength;
    }
    
}


point addResonator(cell* curCell, point couplingPoint, int w_res, int g_res, double frequency, int tailLen, string direction, bool claw) {
   
    point cursor;
    cursor.set(couplingPoint.x(), couplingPoint.y()-w_res/2 - g_res);
    int length = length_from_frequency(frequency, claw)*1e3;
    
    int resTurnRad = 8*w_res;
    generateStructure(curCell, cursor, w_res, tailLen, length, resTurnRad, aux2);
    generateStructure(curCell, cursor, w_res+2*g_res, tailLen+g_res, length+g_res, resTurnRad, aux3);
    
    rotateLayer(curCell, aux2, couplingPoint, angleFromDirection(direction));
    rotateLayer(curCell, aux3, couplingPoint, angleFromDirection(direction));
    if (direction=="u") {
        mirrorLayer(curCell, aux2, couplingPoint, newPoint(couplingPoint.x(), couplingPoint.y()+100e3));
        mirrorLayer(curCell, aux3, couplingPoint, newPoint(couplingPoint.x(), couplingPoint.y()+100e3));
    }
        
    layout->booleanTool->boolOnLayer(M, aux2, M, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(protect, aux3, protect, "A+B", 0, 0, 0);
    
    clearAllAuxiliaryAux(curCell);
    
    point retPoint;
    retPoint.set(step+resTurnRad, -(g_res+w_res/2+resTurnRad+tailLen));
    return rotateVector(retPoint, couplingPoint, direction);
}




point generateStructureHalfwaveTransmission(cell* curCell, point start, int width, int length, int resTurnRad, int layer){
        
        int curLength = 0;
        int tails_len = 0;
        int eff_elect_coef = resTurnRad/(resTurnRad - 0.2*width);
    
    point cursor = copyPoint(start);

    cursor = wire(curCell, layer, cursor, "d", tails_len, width);
    curLength += tails_len;
    
/*    cursor = torusTurn(curCell, layer, cursor, "dl", resTurnRad, width);
    cursor = wire(curCell, layer, cursor, "l", meanderSegmentLength/2, width);
    cursor = torusTurn(curCell, layer, cursor, "ld", resTurnRad, width);
    cursor = torusTurn(curCell, layer, cursor, "dr", resTurnRad, width);
    curLength += math::pi_2*3*resTurnRad + meanderSegmentLength/2;*/

    cursor = torusTurn(curCell, layer, cursor, "dl", resTurnRad, width);//dl
    cursor = wire(curCell, layer, cursor, "l", meanderSegmentLength/2, width);//l
    cursor = torusTurn(curCell, layer, cursor, "ld", resTurnRad, width);//ld
    cursor = torusTurn(curCell, layer, cursor, "dr", resTurnRad, width);//dr
    curLength += math::pi_2*3*eff_elect_coef*resTurnRad + meanderSegmentLength/2;

    
    int meanderStepLength = 2*meanderSegmentLength+2*math::pi*eff_elect_coef*resTurnRad;
    int meander_periods = 0;

      while (curLength + meanderStepLength < (length-meanderSegmentLength/2-math::pi_2*eff_elect_coef*resTurnRad)) {
        meander_periods+=1;
        cursor = drawMeanderStep(curCell, layer, cursor, meanderSegmentLength, resTurnRad, width);
        curLength+=meanderStepLength;
    }



  /*     while (curLength + meanderStepLength < (length/2 - meanderSegmentLength-math::pi*resTurnRad)) {
        meander_periods+=1;
        cursor = drawMeanderStep(curCell, layer, cursor, meanderSegmentLength, resTurnRad, width);
        curLength+=meanderStepLength;
    }
/**
    cursor = wire(curCell, layer, cursor, "r", meanderSegmentLength/2, width);
    cursor = torusTurn(curCell, layer, cursor, "rd", resTurnRad, width);
    curLength += meanderSegmentLength/2 + math::pi_2*resTurnRad;*/
/*
    cursor = wire(curCell, layer, cursor, "d", length - curLength*2-meanderStepLength, width);
    curLength += length-curLength*2-meanderStepLength;


    cursor = torusTurn(curCell, layer, cursor, "dl", resTurnRad, width);
    cursor = wire(curCell, layer, cursor, "l", meanderSegmentLength/2, width);
    cursor = torusTurn(curCell, layer, cursor, "ld", resTurnRad, width);
    cursor = torusTurn(curCell, layer, cursor, "dr", resTurnRad, width);
    curLength += math::pi_2*3*resTurnRad + meanderSegmentLength/2;*/
/* 
    int i;
    for (i=0; i<meander_periods+1; i++) {
        cursor = drawMeanderStep(curCell, layer, cursor, meanderSegmentLength, resTurnRad, width);
        curLength+=meanderStepLength;
    }  */ 

    cursor = wire(curCell, layer, cursor, "r", meanderSegmentLength/2, width);
    cursor = torusTurn(curCell, layer, cursor, "rd", resTurnRad, width);
    curLength += math::pi_2*eff_elect_coef*resTurnRad + meanderSegmentLength/2;
    
    //cursor = wire(curCell, layer, cursor, "d", (length-curLength)/2, width);
    cursor = wire(curCell, layer, cursor, "d", length-curLength, width);
    return cursor;
}

point generateStructureHalfwaveTransmissionCurve(cell* curCell, point start, int width, int length, int resTurnRad, int layer){
        
        int curLength = 0;
        int tails_len = 0e3;
        int eff_elect_coef = resTurnRad/(resTurnRad - 0.2*width);
    
    point cursor = copyPoint(start);

    cursor = wire(curCell, layer, cursor, "r", tails_len, width);//d
    curLength += tails_len;

    cursor = torusTurn(curCell, layer, cursor, "rd", resTurnRad, width);

    cursor = torusTurn(curCell, layer, cursor, "dl", resTurnRad, width);//dl
    cursor = wire(curCell, layer, cursor, "l", meanderSegmentLength/2, width);//l
    cursor = torusTurn(curCell, layer, cursor, "ld", resTurnRad, width);//ld
    cursor = torusTurn(curCell, layer, cursor, "dr", resTurnRad, width);//dr
    curLength += math::pi_2*4*eff_elect_coef*resTurnRad + meanderSegmentLength/2 + tails_len;
    curLength += math::pi_2*eff_elect_coef*resTurnRad; // save or the last step


    
    int meanderStepLength = 2*meanderSegmentLength+2*math::pi*eff_elect_coef*resTurnRad;
    int meander_periods = 0;

      while (curLength + meanderStepLength < length-meanderSegmentLength/2-math::pi_2*eff_elect_coef*resTurnRad){
        meander_periods+=1;
        cursor = drawMeanderStep(curCell, layer, cursor, meanderSegmentLength, resTurnRad, width);
        curLength+=meanderStepLength;
    }




    cursor = wire(curCell, layer, cursor, "r", meanderSegmentLength/2, width);
    cursor = torusTurn(curCell, layer, cursor, "rd", resTurnRad, width);
    curLength += math::pi_2*eff_elect_coef*resTurnRad + meanderSegmentLength/2;

    

    cursor = wire(curCell, layer, cursor, "d", length-curLength, width);
    cursor = torusTurn(curCell, layer, cursor, "dl", resTurnRad, width);
    return cursor;
}

point generateStructureHalfwaveTransmissionTail(cell* curCell, point start, int width, int length, int resTurnRad, int layer){
        
        int curLength = 0;
        int tails_len = 10e3;
        int eff_elect_coef = resTurnRad/(resTurnRad - 0.2*width);
    
    point cursor = copyPoint(start);

    cursor = wire(curCell, layer, cursor, "d", tails_len, width);//d
    curLength += tails_len;

    //cursor = torusTurn(curCell, layer, cursor, "rd", resTurnRad, width);

    cursor = torusTurn(curCell, layer, cursor, "dl", resTurnRad, width);//dl
    cursor = wire(curCell, layer, cursor, "l", meanderSegmentLength/2, width);//l
    cursor = torusTurn(curCell, layer, cursor, "ld", resTurnRad, width);//ld
    cursor = torusTurn(curCell, layer, cursor, "dr", resTurnRad, width);//dr
    curLength += math::pi_2*4*eff_elect_coef*resTurnRad + meanderSegmentLength/2 + tails_len;
    curLength += tails_len; // save or the last step


    
    int meanderStepLength = 2*meanderSegmentLength+2*math::pi*eff_elect_coef*resTurnRad;
    int meander_periods = 0;

      while (curLength + meanderStepLength < length-meanderSegmentLength/2-math::pi_2*eff_elect_coef*resTurnRad){
        meander_periods+=1;
        cursor = drawMeanderStep(curCell, layer, cursor, meanderSegmentLength, resTurnRad, width);
        curLength+=meanderStepLength;
    }




    cursor = wire(curCell, layer, cursor, "r", meanderSegmentLength/2, width);
    cursor = torusTurn(curCell, layer, cursor, "rd", resTurnRad, width);
    curLength += math::pi_2*eff_elect_coef*resTurnRad + meanderSegmentLength/2;

    

    cursor = wire(curCell, layer, cursor, "d", length-curLength, width);
    //cursor = torusTurn(curCell, layer, cursor, "dl", resTurnRad, width);
    return cursor;
}

point generateStructureHalfwaveTransmissionAssym(cell* curCell, point start, int width, int length, int resTurnRad, int layer, int meanderSegmentLength1){
        


        int curLength1 = 0;
        int tails_len = 0;
        //int curTail = 0e3;
        int eff_elect_coef = resTurnRad/(resTurnRad - 0.2*width);

    // generate test resonator to determinate coordinates of the line

    point cursor1 = copyPoint(start);

    cursor1 = wire(curCell, aux6, cursor1, "d", tails_len, width);
    curLength1 += tails_len;
    

    cursor1 = torusTurn(curCell, aux6, cursor1, "dr", resTurnRad, width);//dl
    curLength1 += math::pi_2*eff_elect_coef*resTurnRad + tails_len; // save for the last step

    
    int meanderStepLength = 2*meanderSegmentLength1+2*math::pi*eff_elect_coef*resTurnRad;
    int meander_periods = 0;

      while (curLength1 + meanderStepLength < length-meanderSegmentLength1/2-math::pi_2*eff_elect_coef*resTurnRad){
        meander_periods+=1;
        cursor1 = drawMeanderAssymStep(curCell, aux6, cursor1, meanderSegmentLength1, resTurnRad, width);
        curLength1+=meanderStepLength;

    }


    point cursor1 = copyPoint(start);
    cursor1 = wire(curCell, aux6, cursor1, "r", meanderSegmentLength1, width);
    cursor1 = torusTurn(curCell, aux6, cursor1, "rd", resTurnRad, width);
    cursor1 = torusTurn(curCell, aux6, cursor1, "dl", resTurnRad, width);
    cursor1 = wire(curCell, aux6, cursor1, "l", meanderSegmentLength1, width);
    cursor1 = torusTurn(curCell, aux6, cursor1, "ld", resTurnRad, width);
    curLength1 += math::pi_2*3*eff_elect_coef*resTurnRad + 2*meanderSegmentLength1;

    
    
    cursor1 = wire(curCell, aux6, cursor1, "d", length-curLength1, width);
    //initialization of the remain part of the line
    int curTail = (length-curLength1)/2;

    //end drawing test line
    //clearLayer(curCell, aux);

    //start to draw the real line
    int curLength = 0;
    point cursor = copyPoint(start);
    cursor = wire(curCell, layer, cursor, "d", tails_len, width);
    cursor = wire(curCell, layer, cursor, "d", curTail, width);
    curLength += tails_len;
    curLength += curTail;


    cursor = torusTurn(curCell, layer, cursor, "dr", resTurnRad, width);
    curLength += math::pi_2*eff_elect_coef*resTurnRad + tails_len; // save or the last step



    
    int meanderStepLength = 2*meanderSegmentLength1+2*math::pi*eff_elect_coef*resTurnRad;
    int meander_periods = 0;

      while (curLength + meanderStepLength < length-meanderSegmentLength1/2-math::pi_2*eff_elect_coef*resTurnRad){
        meander_periods+=1;
        cursor = drawMeanderAssymStep(curCell, layer, cursor, meanderSegmentLength1, resTurnRad, width);
        curLength+=meanderStepLength;

    }




    cursor = wire(curCell, layer, cursor, "r", meanderSegmentLength1, width);
    cursor = torusTurn(curCell, layer, cursor, "rd", resTurnRad, width);
    cursor = torusTurn(curCell, layer, cursor, "dl", resTurnRad, width);
    cursor = wire(curCell, layer, cursor, "l", meanderSegmentLength1, width);
    cursor = torusTurn(curCell, layer, cursor, "ld", resTurnRad, width);
    curLength += math::pi_2*3*eff_elect_coef*resTurnRad + 2*meanderSegmentLength1;

    

    cursor = wire(curCell, layer, cursor, "d", tails_len, width);
    cursor = wire(curCell, layer, cursor, "d", curTail, width);
    curLength += curTail;
    cursor = wire(curCell, layer, cursor, "d", length-curLength, width);
    //cursor = wire(curCell, layer, cursor, "d", add_hint, width);
    //cursor = torusTurn(curCell, layer, cursor, "dl", resTurnRad, width);
    //layout->booleanTool->boolOnLayer(M, M, layer,  "A+B", 0, 0, 0);
    return cursor;

}

point addHalfwaveTransmissionResonator(cell* curCell, point start, int w_res, int g_res, double frequency, string direction) {

        int length = length_from_frequency(frequency, false)*2*1e3;
        int resTurnRad = 5*w_res;
        point cursor;
        
       int l_tooth = 50e3;
        int w_tooth = 2.5e3;
        int w_gap= 7.5e3;
        int transition_len = 50e3;
        int n_teeth = 3;

        int idc_len = l_tooth+transition_len;        
    
    point resonator_start = rotateVector(newPoint(0, -idc_len), start, direction);


    addIDC(curCell, resonator_start, w_res, g_res, transition_len, w_tooth, w_gap, l_tooth, n_teeth, opposite(direction), true);
    
    generateStructureHalfwaveTransmission(curCell, resonator_start, w_res, length, resTurnRad, aux);
    cursor = generateStructureHalfwaveTransmission(curCell, resonator_start, w_res+2*g_res, length, resTurnRad, aux2);
    
    rotateLayer(curCell, aux, resonator_start, angleFromDirection(direction));
    rotateLayer(curCell, aux2, resonator_start, angleFromDirection(direction));
    cursor = rotateVector(newPoint(cursor.x()-resonator_start.x(), cursor.y()-resonator_start.y()), resonator_start, direction);
    
    layout->booleanTool->boolOnLayer(M, aux, M, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(protect, aux2, protect, "A+B", 0, 0, 0);
    
    clearLayer(curCell, aux);
    clearAllAuxiliaryAux(curCell);
    
    addIDC(curCell, cursor, w_res, g_res, transition_len, w_tooth, w_gap, l_tooth, n_teeth, direction, true);
    
    return newPoint(cursor.x()+transition_len+l_tooth, cursor.y()); // now only for horizontal left to right resonators
    
}

point addHalfwaveTransmission(cell* curCell, point start, int w_res, int g_res, double frequency, string direction) {

        int length = length_from_frequency(frequency, false)*1e3;
        int resTurnRad = 8*w_res;
        point cursor;

    point resonator_start = rotateVector(newPoint(0, 0), start, direction);


    
    generateStructureHalfwaveTransmission(curCell, resonator_start, w_res, length, resTurnRad, aux);
    cursor = generateStructureHalfwaveTransmission(curCell, resonator_start, w_res+2*g_res, length, resTurnRad, aux2);
    
    rotateLayer(curCell, aux, resonator_start, angleFromDirection(direction));
    rotateLayer(curCell, aux2, resonator_start, angleFromDirection(direction));
    cursor = rotateVector(newPoint(cursor.x()-resonator_start.x(), cursor.y()-resonator_start.y()), resonator_start, direction);
    
    layout->booleanTool->boolOnLayer(M, aux, M, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(protect, aux2, protect, "A+B", 0, 0, 0);
    
    clearLayer(curCell, aux);
    clearAllAuxiliaryAux(curCell);
    
 
    return newPoint(cursor.x(), cursor.y()); // now only for horizontal left to right resonators
    
}

point addHalfwaveTransmissionCurve(cell* curCell, point start, int w_res, int g_res, double frequency, string direction) {

        int length = length_from_frequency(frequency, false)*1e3;
        int resTurnRad = 8*w_res;
        point cursor;

    point resonator_start = rotateVector(newPoint(0, 0), start, direction);


    
    generateStructureHalfwaveTransmissionCurve(curCell, resonator_start, w_res, length, resTurnRad, aux);
    cursor = generateStructureHalfwaveTransmissionCurve(curCell, resonator_start, w_res+2*g_res, length, resTurnRad, aux2);
    
    rotateLayer(curCell, aux, resonator_start, angleFromDirection(direction));
    rotateLayer(curCell, aux2, resonator_start, angleFromDirection(direction));
    cursor = rotateVector(newPoint(cursor.x()-resonator_start.x(), cursor.y()-resonator_start.y()), resonator_start, direction);
    
    layout->booleanTool->boolOnLayer(M, aux, M, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(protect, aux2, protect, "A+B", 0, 0, 0);
    
    clearLayer(curCell, aux);
    clearAllAuxiliaryAux(curCell);
    
 
    return newPoint(cursor.x(), cursor.y()); // now only for horizontal left to right resonators
    
}
point addHalfwaveTransmissionTail(cell* curCell, point start, int w_res, int g_res, double frequency, string direction) {

        int length = length_from_frequency(frequency, false)*1e3;
        int resTurnRad = 8*w_res;
        point cursor;

    point resonator_start = rotateVector(newPoint(0, 0), start, direction);


    
    generateStructureHalfwaveTransmissionTail(curCell, resonator_start, w_res, length, resTurnRad, aux);
    cursor = generateStructureHalfwaveTransmissionTail(curCell, resonator_start, w_res+2*g_res, length, resTurnRad, aux2);
    
    rotateLayer(curCell, aux, resonator_start, angleFromDirection(direction));
    rotateLayer(curCell, aux2, resonator_start, angleFromDirection(direction));
    cursor = rotateVector(newPoint(cursor.x()-resonator_start.x(), cursor.y()-resonator_start.y()), resonator_start, direction);
    
    layout->booleanTool->boolOnLayer(M, aux, M, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(protect, aux2, protect, "A+B", 0, 0, 0);
    
    clearLayer(curCell, aux);
    clearAllAuxiliaryAux(curCell);
    
 
    return newPoint(cursor.x(), cursor.y()); // now only for horizontal left to right resonators
    
}

point addHalfwaveTransmissionAssym(cell* curCell, point start, int w_res, int g_res, double frequency, int meanderSegmentLength1, string direction, double add_hint) {

        int length = length_from_frequency(frequency, false)*1e3*add_hint;
        int resTurnRad = 2*w_res; //2*w_res+50e3; 
        point cursor;

    point resonator_start = rotateVector(newPoint(0, 0), start, direction);


    
    generateStructureHalfwaveTransmissionAssym(curCell, resonator_start, w_res, length, resTurnRad, aux, meanderSegmentLength1);
    cursor = generateStructureHalfwaveTransmissionAssym(curCell, resonator_start, w_res+2*g_res, length, resTurnRad, aux2, meanderSegmentLength1);
    
    rotateLayer(curCell, aux, resonator_start, angleFromDirection(direction));
    rotateLayer(curCell, aux2, resonator_start, angleFromDirection(direction));
    cursor = rotateVector(newPoint(cursor.x()-resonator_start.x(), cursor.y()-resonator_start.y()), resonator_start, direction);
    
    layout->booleanTool->boolOnLayer(M, aux, M, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(protect, aux2, protect, "A+B", 0, 0, 0);
    
    clearLayer(curCell, aux);
    clearAllAuxiliaryAux(curCell);
    
 
    return newPoint(cursor.x(), cursor.y()); // now only for horizontal left to right resonators
    
}


point addResonatorNoMeander(cell* curCell, point couplingPoint, int w_res, int g_res, double frequency, int tailLen, string direction, bool claw) {
    
    point cursor;
    cursor.set(couplingPoint.x(), couplingPoint.y()-w_res/2 - g_res);
    
    int length = length_from_frequency(frequency, claw)*1e3;
    int resTurnRad = 8*w_res;
    int curLength = 0;
    point start;
    start.set(cursor.x(), cursor.y());
    int layer = aux2;
    int width = w_res;
    int i;
    for (i=0; i<2; i++) {
        curLength = 0;
        cursor = wire(curCell, layer, start, "r", step, width);
        curLength+=step;
        cursor = torusTurn(curCell, layer, cursor, "rd", resTurnRad, width);
        curLength+=resTurnRad*math::pi_2;
        cursor = wire(curCell, layer, cursor, "d", tailLen, width);
        curLength+=tailLen;
        
        cursor.set(start.x(), start.y());
        
        cursor = wire(curCell, layer, cursor, "l", step, width);
        curLength+=step;
        cursor = torusTurn(curCell, layer, cursor, "ld", resTurnRad, width);
        curLength+=resTurnRad*math::pi_2;
        cursor = wire(curCell, layer, cursor, "d", length-curLength, width);
        width = 2*g_res+w_res;
        tailLen += g_res;
        length += g_res;
        layer = aux3;
    }
    
    rotateLayer(curCell, aux2, couplingPoint, angleFromDirection(direction));
    rotateLayer(curCell, aux3, couplingPoint, angleFromDirection(direction));
    if (direction=="u") {
        mirrorLayer(curCell, aux2, couplingPoint, newPoint(couplingPoint.x(), couplingPoint.y()+100e3));
        mirrorLayer(curCell, aux3, couplingPoint, newPoint(couplingPoint.x(), couplingPoint.y()+100e3));
    }
    
    layout->booleanTool->boolOnLayer(M, aux2, M, "A+B", 0, 0, 0);
    layout->booleanTool->boolOnLayer(protect, aux3, protect, "A+B", 0, 0, 0);
    
    clearAllAuxiliaryAux(curCell);
    
    point retPoint;
    retPoint.set(step+resTurnRad, -(g_res+w_res/2+resTurnRad+tailLen));
    return rotateVector(retPoint, couplingPoint, direction);


}
